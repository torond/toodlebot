<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://npmcdn.com/flatpickr/dist/themes/airbnb.css">
    <style>
        :root {
            --custom-width-full: 100%;
            --custom-width-day: calc(var(--custom-width-full) / 7);
            place-items: center;
        }

        .custom-btn-holder {
            display: flex;
            position: fixed;
            left: 0;
            right: 0;
            bottom: 0;
        }

        .custom-btn-holder button {
            flex-grow: 1;
        }

        .flatpickr-calendar {
            width: var(--custom-width-full);
        }

        .dayContainer {
            width: var(--custom-width-full);
            max-width: var(--custom-width-full);
            min-width: var(--custom-width-full);
        }

        .flatpickr-days {
            width: var(--custom-width-full);
        }

        .flatpickr-day {
            max-width: var(--custom-width-day);
            max-height: var(--custom-width-day);
        }

        .final {
            position: absolute;
            width: 10px;
            height: 10px;
            border-radius: 150px;
            bottom: 3px;
            left: calc(50% - 5px);
            display: block;
            background: green;
        }

        .final.no {
            background: indianred;
        }

        .test {
            position: absolute;
            right: 5px;
            bottom: 5px;
        }

        input {
            width: 100%;
            box-sizing: border-box;
        }
    </style>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">
</head>
<body>

{{#config.isSetup}}
<input type="text" id="titleInput">
{{/config.isSetup}}
{{^config.isSetup}}
<div>{{title}}</div>
{{/config.isSetup}}

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<div class="picker" id="pkr"></div>
<p>{{config.description}}</p>

{{#numberOfParticipants}}
<p>{{numberOfParticipants}} participants so far.</p>
{{/numberOfParticipants}}

<div class="custom-btn-holder">
    <button type="cancel-button" onclick="window.location.href='tg:resolve'">Cancel</button>
    {{#config.hasConfirmButton}}
    <button id="confirm-button" type="button">Confirm</button>
    {{/config.hasConfirmButton}}
</div>

<script>
    // Initially disable confirm button
    {{#config.hasConfirmButton}}
    document.getElementById("confirm-button").disabled = true;
    {{/config.hasConfirmButton}}

    {{#config.isSetup}}
        const defaultTitle = `Doodle from ${new Date().toDateString()}`
        document.getElementById("titleInput").placeholder = `${defaultTitle} (Tap to change title)`
        {{#title}}
            document.getElementById("titleInput").value = "{{title}}"
        {{/title}}
    {{/config.isSetup}}

    {{#numberOfParticipants}}
    const numberOfParticipants = {{numberOfParticipants}};
    {{/numberOfParticipants}}

    {{#participations}}
    const participations = { {{#content}}"{{key}}": {{value}}, {{/content}} };
    {{/participations}}

    {{#finalDates}}
    const finalDates = [{{#content}}"{{.}}", {{/content}}];
    {{/finalDates}}

    /*function getNumberOfParticipants(date) {
        return participations[date.format]
    }*/

    function formatDate(date) {
        return date.getFullYear() + '-'
                + ('0' + (date.getMonth() + 1)).slice(-2) + '-'
                + ('0' + date.getDate()).slice(-2);
    }

    const fp = flatpickr("#pkr", {
        inline: true,
        disableMobile: "true",
        static: true, //necessary?
        mode: "multiple",
        onDayCreate: function (dObj, dStr, fp, dayElem) {
            var formattedDate = formatDate(dayElem.dateObj)
            {{#participations}}
                participantsToday = participations[formattedDate];
                if (participantsToday != null) {
                    console.log(participantsToday)
                    dayElem.innerHTML += "<span class='test'>" + participantsToday.length.toString() + "/{{numberOfParticipants}}</span>";
                }
            {{/participations}}
            {{#finalDates}}
                if (finalDates.includes(formattedDate)) {
                    dayElem.innerHTML += "<span class='final'></span>"
                }
            {{/finalDates}}
        },
        {{#config.hasConfirmButton}}
        onChange: function(selectedDates, dateStr, instance) {
            if (selectedDates.length === 0) {
                document.getElementById("confirm-button").disabled = true;
            } else {
                document.getElementById("confirm-button").disabled = false;
            }
        },
        {{/config.hasConfirmButton}}
        {{#defaultDates}}defaultDate: [{{#content}}"{{.}}", {{/content}}],{{/defaultDates}}
        {{#enabledDates}}enable: [{{#content}}"{{.}}", {{/content}}],{{/enabledDates}}
    });


    xhr = new XMLHttpRequest();
    xhr.open('POST', '{{config.confirmRecipientUrl}}{{#doodleId}}/{{doodleId}}{{/doodleId}}');
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.onload = function () {
        if (xhr.status !== 200) {
            alert('Request failed. Returned status of ' + xhr.status);
        } else {
            console.log(xhr.response)
            window.location.href = 'tg:resolve'
        }
    };
    document.getElementById("confirm-button").addEventListener("click",
            function () {
                {{#config.isSetup}}
                    const titleInput = document.getElementById('titleInput');
                    if (!titleInput.value) {
                        titleInput.value = defaultTitle;
                    }
                    xhr.send(JSON.stringify(
                            {
                                "dates": fp.selectedDates.map(x => formatDate(x)),
                                "title": titleInput.value
                            }
                        )
                    )
                {{/config.isSetup}}
                {{^config.isSetup}}
                    xhr.send(JSON.stringify(fp.selectedDates.map(x => formatDate(x))))
                {{/config.isSetup}}

            },
            false
    );
</script>
</body>
</html>
