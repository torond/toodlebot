<!DOCTYPE html>
<html>
<head>
    <!-- Get variables -->
    <link rel="stylesheet" href="/assets/root.css" type="text/css">

    <!-- Get flatpickr stylesheet -->
    <link rel="stylesheet" href="/assets/flatpickr.css" type="text/css">

    <!-- Style other elements -->
    <style>
        body {
            /* Disable selecting text */
            -webkit-touch-callout: none; /* iOS Safari */
              -webkit-user-select: none; /* Safari */
               -khtml-user-select: none; /* Konqueror HTML */
                 -moz-user-select: none; /* Firefox */
                  -ms-user-select: none; /* Internet Explorer/Edge */
                      user-select: none; /* Non-prefixed version, currently
                                            supported by Chrome and Opera */
            color: var(--text-color);
            margin: 0;
            background-color: var(--chat-background-color)
        }

        /* Other things */
        .custom-btn-holder {
            display: flex;
            left: 0;
            right: 0;
            margin: 10px;
            gap: 10px;
        }

        .custom-btn-holder button {
            flex-grow: 1;
            background-color: var(--message-color);
            color: var(--text-color);
            border: 0;
            border-radius: 5px;
            margin: auto;
            height: 40px;
            font-size: 135%;
            font-weight: bold;
        }

        .custom-btn-holder button:focus {
            background: var(--touch-button-color);
        }

        .pin {
            color: var(--accent-color);
            position: absolute;
            margin-left: -2px;
            margin-top: 2px;
            width: 12px;
            height: 12px;
            border: solid 1px var(--tile-color);
            border-radius: 7px 7px 7px 0;
            background-color: currentColor;
            -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg);
        }

        .pin:before {
            content: '';
            position: absolute;
            left: 3.5px;
            top: 3.25px;
            width: 3.5px;
            height: 3.5px;
            color: var(--tile-color);
            border: solid 1px var(--tile-color);
            border-radius: 3px;
            background-color: currentColor;
        }

        .final {
            position: absolute;
            width: 10px;
            height: 10px;
            border-radius: 150px;
            bottom: 3px;
            left: calc(50% - 5px);
            display: block;
            background: green;
        }

        .final.no {
            background: indianred;
        }

        input, .title {
            display: flex;
            margin: 0;
            border: 0;
            width: 100%;
            background-color: var(--header-background-color);
            color: var(--header-text-color);
            box-sizing: border-box;
            padding: 1% 4%;
            line-height: 200%;
            font-size: 150%;
            font-weight: bold;
        }

        input:focus {
            outline-width: 0;
        }

        .description {
            margin: 10px 0 5px;
            padding: 5px;
            border: var(--seperator-color);
            background: var(--tile-color);
        }
    </style>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">
</head>
<body>

{{#config.isSetup}}
<input type="text" id="titleInput">
{{/config.isSetup}}
{{^config.isSetup}}
<div class="title">{{title}}</div>
{{/config.isSetup}}

<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<div class="picker" id="pkr"></div>
<div class="description">{{config.description}}</div>

{{#numberOfParticipants}}
<p>{{numberOfParticipants}} participants so far.</p>
{{/numberOfParticipants}}

<div class="custom-btn-holder">
    <button id="cancel-button" type="button" onclick="window.location.href='tg://resolve'">Cancel</button>
    {{#config.hasConfirmButton}}
    <button id="confirm-button" type="button">Confirm</button>
    {{/config.hasConfirmButton}}
</div>

<script>
    // Initially disable confirm button on Setup Doodle
    {{#config.isSetup}}
    document.getElementById("confirm-button").disabled = true;
    {{/config.isSetup}}

    {{#config.isSetup}}
        const defaultTitle = new Date().toDateString()
        document.getElementById("titleInput").placeholder = `${defaultTitle} (Tap to change)`
        {{#title}}
            document.getElementById("titleInput").value = "{{title}}"
        {{/title}}
    {{/config.isSetup}}

    {{#numberOfParticipants}}
    const numberOfParticipants = {{numberOfParticipants}};
    {{/numberOfParticipants}}

    {{#participations}}
    const participations = { {{#content}}"{{key}}": {{value}}, {{/content}} };
    {{/participations}}

    {{#finalDates}}
    const finalDates = [{{#content}}"{{.}}", {{/content}}];
    {{/finalDates}}

    /*function getNumberOfParticipants(date) {
        return participations[date.format]
    }*/

    function formatDate(date) {
        return date.getFullYear() + '-'
                + ('0' + (date.getMonth() + 1)).slice(-2) + '-'
                + ('0' + date.getDate()).slice(-2);
    }

    function isToday(someDate) {
        const today = new Date()
        return someDate.getDate() === today.getDate() &&
                someDate.getMonth() === today.getMonth() &&
                someDate.getFullYear() === today.getFullYear()
    }

    const fp = flatpickr("#pkr", {
        inline: true,
        disableMobile: "true",
        static: true, //necessary?
        mode: "multiple",
        monthSelectorType: "static",
        onDayCreate: function (dObj, dStr, fp, dayElem) {
            var formattedDate = formatDate(dayElem.dateObj)
            if (isToday(dayElem.dateObj)) {
                dayElem.innerHTML += "<span class='pin'></span>"
            }
            {{#participations}}
                const participantsToday = participations[formattedDate];
                if (participantsToday != null) {
                    console.log(participantsToday)
                    dayElem.innerHTML += "<span class='test'>(" + participantsToday.length.toString() + "/{{numberOfParticipants}})</span>";
                }
            {{/participations}}
            {{#finalDates}}
                if (finalDates.includes(formattedDate)) {
                    dayElem.innerHTML += "<span class='final'></span>"
                }
            {{/finalDates}}
        },
        {{#config.isSetup}}
        onChange: function(selectedDates, dateStr, instance) {
            document.getElementById("confirm-button").disabled = selectedDates.length === 0;
        },
        {{/config.isSetup}}
        {{#defaultDates}}defaultDate: [{{#content}}"{{.}}", {{/content}}],{{/defaultDates}}
        {{#enabledDates}}enable: [{{#content}}"{{.}}", {{/content}}],{{/enabledDates}}
    });


    xhr = new XMLHttpRequest();
    xhr.open('POST', '{{config.confirmRecipientUrl}}{{#doodleId}}/{{doodleId}}{{/doodleId}}');
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.onload = function () {
        if (xhr.status !== 200) {
            alert('Request failed. Returned status of ' + xhr.status);
        } else {
            console.log(xhr.response)
            window.location = "tg://resolve"///?domain=chssrnm"//{{botUsername}}"
            // Maybe "https://t.me/{{botUsername}}"
            //window.close()
            //window.location.href = "tg://resolve/{{botUsername}}"
        }
    };
    document.getElementById("confirm-button").addEventListener("click",
            function () {
                {{#config.isSetup}}
                    const titleInput = document.getElementById('titleInput');
                    if (!titleInput.value) {
                        titleInput.value = defaultTitle;
                    }
                    xhr.send(JSON.stringify(
                            {
                                "dates": fp.selectedDates.map(x => formatDate(x)),
                                "title": titleInput.value
                            }
                        )
                    )
                {{/config.isSetup}}
                {{^config.isSetup}}
                    xhr.send(JSON.stringify(fp.selectedDates.map(x => formatDate(x))))
                {{/config.isSetup}}

            },
            false
    );
</script>
</body>
</html>
